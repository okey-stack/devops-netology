---
###############################
# User config
###############################
- name: Join the group
  become: true
  ansible.builtin.user:
    name: "{{ansible_user}}"
    groups: microk8s
    append: yes

- name: Gain access to the .kube caching
  become: true
  ansible.builtin.file:
    path: ~/.kube
    owner: "{{ansible_user}}"
    recurse: yes

- name: Add alias for microk8s
  ansible.builtin.lineinfile:
    path: ~/.bashrc
    line: "alias kubectl='microk8s kubectl'"
    owner: "{{ansible_user}}"
    regexp: "^alias kubectl='microk8s kubectl'"
    state: present
    insertafter: EOF
    create: True
- name: Reset ssh connection to allow user changes to affect ansible user
  ansible.builtin.meta:
    reset_connection
###############################
# Server config
###############################
- name: Instal pip
  become: true
  apt:
    name: python3-pip
    state: present

- name: Copy requirements
  copy:
    src: "../requirements.txt"
    mode: 0600
    dest: "/tmp/requirements.txt"

- name: Install specified python requirements
  become: true
  pip:
    requirements: /tmp/requirements.txt
    state: present

- name: Check External IP is already included in the template
  ansible.builtin.shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | grep '= {{ansible_host}}' | wc -l"
  register: ip_included
  changed_when: False

- name: Get highest entry in the list of IPs
  become: true
  ansible.builtin.shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | sed -nr 's/IP\\.([0-9]+).*/\\1/p' | sort | tail -n 1"
  register: csr_template_output
  when: ip_included.stdout_lines[0]|int == 0

- name: Add External IP
  become: true
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    insertafter: "^IP.{{csr_template_output.stdout_lines[0]}} = .*"
    line: "IP.{{csr_template_output.stdout_lines[0]|int + 100}} = {{ansible_host}}"
  register: csr_mod_result
  when: ip_included.stdout_lines[0]|int == 0

- name: Restart microk8s (stop)
  shell: "microk8s.stop"
  when: ip_included.stdout_lines[0]|int == 0

- name: Restart microk8s (start)
  shell: "microk8s.start"
  when: ip_included.stdout_lines[0]|int == 0
  ignore_errors: True
###############################
# Enable addons
###############################
- name: Enable ingress
  ansible.builtin.shell: "microk8s enable ingress"

- name: Enable dashboard
  ansible.builtin.shell: "microk8s enable dashboard"

- name: Enable host-access
  ansible.builtin.shell: "microk8s enable host-access:ip={{ansible_host}}"

###############################
# Kube config
###############################

- name: Create kubeconfig
  ansible.builtin.shell: microk8s config > config
  args:
    chdir: ~/.kube
    creates: config

- name: Create exteranl kubeconfig
  ansible.builtin.shell: microk8s config > config_ext
  args:
    chdir: ~/.kube
    creates: config_ext

- name: Replace external IP in config_ext
  replace:
    path: ~/.kube/config_ext
    regexp: 'server: https://[0-9\\.]+:16443'
    replace: "server: https://{{ansible_host}}:16443"

- name: Copy kubeconfig from the server to the control machine
  fetch:
    src: ~/.kube/config_ext
    dest: ~/.kube/config_ext
    flat: yes